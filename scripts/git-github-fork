#!/usr/bin/env python3

# Copyright (c) 2015 Anthony Sottile

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import annotations

import argparse
import json
import os
import subprocess
import sys
import urllib.request
from typing import NoReturn
from typing import Sequence


def get_slug() -> str:
    cmd = ('git', 'config', 'remote.origin.url')
    remote = subprocess.check_output(cmd).strip().decode()
    assert remote.startswith('git@github.com:'), remote
    _, _, slug = remote.partition(':')
    return slug


def load_config() -> dict[str, str]:
    filename = os.path.expanduser('~/.github-auth.json')
    mode = os.stat(filename).st_mode & 0o777
    if sys.platform != 'win32' and mode != 0o600:
        raise SystemExit(
            f'{filename} has too-permissive permissions, Expected 0o600, '
            f'got 0o{mode:o}',
        )

    with open(filename) as f:
        return json.load(f)


def fork(slug: str, token: str) -> None:
    url = f'https://api.github.com/repos/{slug}/forks'
    print(url)
    request = urllib.request.Request(url, data=b'')
    request.add_header('Authorization', f'token {token}')
    urllib.request.urlopen(request)


def add_remote(slug: str, username: str) -> NoReturn:
    _, _, repo_name = slug.partition('/')
    slug = f'{username}/{repo_name}'
    cmd = ('git', 'remote', 'add', username, f'git@github.com:{slug}')
    os.execvp(cmd[0], cmd)


def main(argv: Sequence[str] | None = None) -> NoReturn:
    parser = argparse.ArgumentParser()
    parser.parse_args(argv)

    slug = get_slug()
    auth = load_config()
    fork(slug, auth['token'])
    add_remote(slug, auth['username'])


if __name__ == '__main__':
    exit(main())
